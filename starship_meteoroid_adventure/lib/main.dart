import 'package:flutter/material.dart'; // –§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
import 'package:provider/provider.dart'; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
import 'package:shared_preferences/shared_preferences.dart'; // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
import 'dart:async'; // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π.
import 'dart:math'; // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.

// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
void main() {
  runApp(
    ChangeNotifierProvider(
      create: (_) => GameState(), // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç GameState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã.
      child: SpaceScrollerGame(), // –ö–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    ),
  );
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã, –≤–∫–ª—é—á–∞—è —Ä–µ–∫–æ—Ä–¥.
class GameState extends ChangeNotifier {
  int _highScore = 0; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–∞.

  int get highScore => _highScore; // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∫–æ—Ä–¥—É.

  GameState() {
    _loadHighScore(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ—Ä–¥ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç –≤—ã—à–µ.
  void updateHighScore(int score) {
    if (score > _highScore) {
      _highScore = score;
      _saveHighScore(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥.
      notifyListeners(); // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞ –≤ –ø–∞–º—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
  void _saveHighScore() async {
    final prefs = await SharedPreferences.getInstance();
    prefs.setInt('highScore', _highScore);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞ –∏–∑ –ø–∞–º—è—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
  void _loadHighScore() async {
    final prefs = await SharedPreferences.getInstance();
    _highScore = prefs.getInt('highScore') ?? 0;
    notifyListeners();
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
class SpaceScrollerGame extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Starship: Meteoroid Adventure', // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
      home: MainMenuScreen(), // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    );
  }
}

// –≠–∫—Ä–∞–Ω –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
class MainMenuScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final highScore = context.watch<GameState>().highScore; // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ—Ä–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    return Scaffold(
      backgroundColor: Colors.black, // –ß—ë—Ä–Ω—ã–π —Ñ–æ–Ω.
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Starship: Meteoroid Adventure', // –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã.
              style: TextStyle(color: Colors.white, fontSize: 32, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 20),
            Text(
              'üöÄ', // –ò–∫–æ–Ω–∫–∞ —Ä–∞–∫–µ—Ç—ã.
              style: TextStyle(fontSize: 100),
            ),
            SizedBox(height: 20),
            Text(
              //'High Score: $highScore', // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞.
              '–†–µ–∫–æ—Ä–¥: $highScore', // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞.
              style: TextStyle(color: Colors.white, fontSize: 24),
            ),
            SizedBox(height: 30),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).push(MaterialPageRoute(builder: (_) => SpaceGameScreen())); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ.
              },
              //child: Text('Start Game'), // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞.
              child: Text('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üéÆ'),
            ),
          ],
        ),
      ),
    );
  }
}

// –≠–∫—Ä–∞–Ω —Å–∞–º–æ–π –∏–≥—Ä—ã.
class SpaceGameScreen extends StatefulWidget {
  @override
  _SpaceGameScreenState createState() => _SpaceGameScreenState();
}

class _SpaceGameScreenState extends State<SpaceGameScreen> {
  double spaceshipPosition = 0.0; // –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∫–µ—Ç—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.
  List<double> obstaclePositions = [0.0, 0.5, -0.5]; // –ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.
  List<double> obstacleHeights = [0.0, -1.0, -2.0]; // –í—ã—Å–æ—Ç—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.
  double speed = 0.0025; // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å.
  double speedAdd = 0.0002; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏.
  //Timer? gameTimer; // –¢–∞–π–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞.
  //Timer? movementTimer; // –¢–∞–π–º–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è —Ä–∞–∫–µ—Ç—ã.
  int score = 0; // –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç.
  bool isGameOver = false; // –§–ª–∞–≥ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã.
  final Random random = Random(); // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.

  // –ù–∞—á–∞–ª–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞.
  void startGame() {
    Future<void> gameLoop() async {
      while (!isGameOver) {
        await Future.delayed(Duration(milliseconds: 8)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è 120 FPS.
        setState(() {
          for (int i = 0; i < obstacleHeights.length; i++) {
            obstacleHeights[i] += speed; // –°–¥–≤–∏–≥–∞–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤–Ω–∏–∑.
            if (obstacleHeights[i] > 1.0) { // –ï—Å–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—à–ª–æ —ç–∫—Ä–∞–Ω.
              obstacleHeights[i] = -1.0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –Ω–∞–≤–µ—Ä—Ö.
              obstaclePositions[i] = (random.nextDouble() * 2.0 - 1.0); // –ù–æ–≤–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è.
              score++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç.
              speed += speedAdd; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å.
            }
          }
        });
        checkCollision(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è.
      }
    }

    gameLoop();
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ä–∞–∫–µ—Ç—ã.
  void moveSpaceship(double direction) {
    if (isGameOver) return;
    setState(() {
      spaceshipPosition += direction; // –ú–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é.
      spaceshipPosition = spaceshipPosition.clamp(-1.0, 1.0); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ.
    });
  }
  bool isMoving = false;
  // –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.
  void startContinuousMovement(double direction) async {
    isMoving = true;
    while (isMoving && !isGameOver) {
      moveSpaceship(direction * 0.025);
      await Future.delayed(Duration(milliseconds: 8));
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.
  void stopContinuousMovement() {
    isMoving = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π.
  void checkCollision() {
    for (int i = 0; i < obstacleHeights.length; i++) {
      if ((obstacleHeights[i] > 0.65 && obstacleHeights[i] < 0.70) && // –ó–æ–Ω–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏.
          (spaceshipPosition > obstaclePositions[i] - 0.4 && spaceshipPosition < obstaclePositions[i] + 0.4)) { // –ó–æ–Ω–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.
        gameOver();
      }
    }
  }

  // –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.
  void gameOver() {
    setState(() {
      isGameOver = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã.
    });
    //gameTimer?.cancel();
    //movementTimer?.cancel();
    final gameState = context.read<GameState>();
    gameState.updateHighScore(score); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥.

    showDialog(
      barrierDismissible: false,
      context: context,
      builder: (context) => AlertDialog(
        //title: Text('Game Over'),
        title: Text('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üëæ'),
        //content: Text('Your score: $score'),
        content: Text('–û—á–∫–∏: $score'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              resetGame(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã.
            },
            //child: Text('Restart'),
            child: Text('–ó–∞–Ω–æ–≤–æ'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.of(context).pushAndRemoveUntil(
                MaterialPageRoute(builder: (_) => MainMenuScreen()),
                    (route) => false,
              ); // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
            },
            //child: Text('Main Menu'),
            child: Text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
          ),
        ],
      ),
    );
  }

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.
  void resetGame() {
    setState(() {
      spaceshipPosition = 0.0;
      obstacleHeights = [0.0, -1.0, -2.0];
      obstaclePositions = [0.0, 0.5, -0.5];
      speed = 0.0025;
      score = 0;
      isGameOver = false;
    });
    startGame(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª.
  }

  @override
  void initState() {
    super.initState();
    startGame(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã.
  }

  @override
  void dispose() {
    //gameTimer?.cancel(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã.
    //movementTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final highScore = context.watch<GameState>().highScore;

    return Scaffold(
      backgroundColor: Colors.black, // –ß—ë—Ä–Ω—ã–π —Ñ–æ–Ω.
      body: Column(
        children: [
          SizedBox(height: 50),
          //Text('Score: $score', style: TextStyle(color: Colors.white, fontSize: 24)), // –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç.
          Text('–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: $score', style: TextStyle(color: Colors.white, fontSize: 24)), // –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç.
          //Text('High Score: $highScore', style: TextStyle(color: Colors.white, fontSize: 20)), // –†–µ–∫–æ—Ä–¥.
          Text('–†–µ–∫–æ—Ä–¥: $highScore', style: TextStyle(color: Colors.white, fontSize: 20)), // –†–µ–∫–æ—Ä–¥.
          Expanded(
            child: Stack(
              children: [
                // –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∫–µ—Ç—ã.
                Positioned(
                  bottom: 50,
                  left: MediaQuery.of(context).size.width / 2 + spaceshipPosition * 100 - 25,
                  child: Transform.rotate(
                    angle: -pi / 4, // –ü–æ–≤–æ—Ä–æ—Ç —Ä–∞–∫–µ—Ç—ã.
                    child: Text('üöÄ', style: TextStyle(fontSize: 50)),
                  ),
                ),
                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.
                for (int i = 0; i < obstacleHeights.length; i++)
                  Positioned(
                    top: MediaQuery.of(context).size.height * obstacleHeights[i],
                    left: MediaQuery.of(context).size.width / 2 + obstaclePositions[i] * 100 - 25,
                    child: Text('üåë', style: TextStyle(fontSize: 50)),
                  ),
              ],
            ),
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              // –ö–Ω–æ–ø–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –≤–ª–µ–≤–æ.
              GestureDetector(
                onTapDown: (_) {
                  startContinuousMovement(-1.0);
                },
                onTapUp: (_) {
                  stopContinuousMovement();
                },
                onTapCancel: () {
                  stopContinuousMovement();
                },
                child: ElevatedButton(
                  onPressed: isGameOver ? null : () => moveSpaceship(-0.1),
                  //child: Text('Left'),
                  child: Text('<<<'),
                ),
              ),
              // –ö–Ω–æ–ø–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø—Ä–∞–≤–æ.
              GestureDetector(
                onTapDown: (_) {
                  startContinuousMovement(1.0);
                },
                onTapUp: (_) {
                  stopContinuousMovement();
                },
                onTapCancel: () {
                  stopContinuousMovement();
                },
                child: ElevatedButton(
                  onPressed: isGameOver ? null : () => moveSpaceship(0.1),
                  //child: Text('Right'),
                  child: Text('>>>'),
                ),
              ),
            ],
          ),
          SizedBox(height: 20),
        ],
      ),
    );
  }
}
